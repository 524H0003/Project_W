# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  additionalFields: JSON!
  applicationDeadline: DateTime!
  description: String!
  endDate: DateTime!
  id: String!
  location: String!
  maxParticipants: Float!
  positionsAvailable: Float!
  requiredSkills: String!
  startDate: DateTime!
  status: event_status!
  title: String!
  type: event_type!
}

input EventAssign {
  additionalFields: JSON = ""
  applicationDeadline: DateTime
  description: String = ""
  endDate: DateTime!
  location: String!
  maxParticipants: Float!
  positionsAvailable: Float!
  requiredSkills: String = ""
  startDate: DateTime!
  status: String = "draft"
  title: String!
  type: String = "internship"
}

type EventTag {
  id: String!
  name: String!
  toEvents: [Event!]
}

input EventTagAssign {
  name: String!
}

input EventTagAttach {
  eventId: String!
  name: String!
}

input EventUpdate {
  additionalFields: JSON
  applicationDeadline: DateTime
  description: String
  endDate: DateTime
  id: String!
  location: String
  maxParticipants: Float
  positionsAvailable: Float
  requiredSkills: String
  startDate: DateTime
  status: String
  title: String
  type: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  assignEvent(input: EventAssign!): Event!
  assignEventTag(input: EventTagAssign!): EventTag!
  assignNotification(input: NotificationAssign!): Notification!
  assignReciever(input: RecieverAssign!): Reciever!
  assignRecieverMany(input: RecieverAssignMany!): [Reciever!]!
  attachEventTag(input: EventTagAttach!): EventTag!
  readNotification(input: ReadNotification!): Reciever!
  readNotificationMany(input: ReadNotificationMany!): [Reciever!]!
  updateEvent(input: EventUpdate!): Event!
  updateNotification(input: NotificationUpdate!): Notification!
}

type Notification {
  content: String!
  id: String!
  title: String!
  type: notification_type!
}

input NotificationAssign {
  content: String!
  title: String!
  type: String!
}

input NotificationUpdate {
  content: String
  id: String!
  title: String
  type: String
}

type Query {
  user(id: String!): User!
  userAll: [User!]!
}

input ReadNotification {
  recieverId: String!
}

input ReadNotificationMany {
  recieversId: [String!]!
}

type Reciever {
  id: String!
  isRead: Boolean!
  readAt: DateTime
}

input RecieverAssign {
  notificationId: String!
  userId: String!
}

input RecieverAssignMany {
  notificationId: String!
  usersId: [String!]!
}

type User {
  role: UserRole!
}

enum UserRole {
  admin
  enterprise
  faculty
  student
  undefined
}

enum event_status {
  Cancelled
  Completed
  Draft
  Published
}

enum event_type {
  Internship
  Job_fair
  Seminar
  Workshop
}

enum notification_type {
  event
  participation
  progress
  system
}