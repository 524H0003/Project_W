/* eslint-disable */
export default async () => {
    const t = {
        ["./app/app.entity"]: await import("./app/app.entity"),
        ["./app/utils/model.utils"]: await import("./app/utils/model.utils"),
        ["./app/hook/hook.entity"]: await import("./app/hook/hook.entity"),
        ["./auth/device/device.entity"]: await import("./auth/device/device.entity"),
        ["./user/user.entity"]: await import("./user/user.entity"),
        ["./auth/session/session.entity"]: await import("./auth/session/session.entity"),
        ["./notification/reciever/reciever.entity"]: await import("./notification/reciever/reciever.entity"),
        ["./notification/notification.model"]: await import("./notification/notification.model"),
        ["./notification/notification.entity"]: await import("./notification/notification.entity"),
        ["./event/event.entity"]: await import("./event/event.entity"),
        ["./file/file.model"]: await import("./file/file.model"),
        ["./event/creator/creator.entity"]: await import("./event/creator/creator.entity"),
        ["./event/participator/participator.entity"]: await import("./event/participator/participator.entity"),
        ["./file/file.entity"]: await import("./file/file.entity"),
        ["./event/tag/tag.entity"]: await import("./event/tag/tag.entity"),
        ["./event/event.model"]: await import("./event/event.model"),
        ["./event/participator/participator.model"]: await import("./event/participator/participator.model"),
        ["./user/user.model"]: await import("./user/user.model"),
        ["./enterprise/enterprise.entity"]: await import("./enterprise/enterprise.entity"),
        ["./enterprise/employee/employee.model"]: await import("./enterprise/employee/employee.model"),
        ["./enterprise/employee/employee.entity"]: await import("./enterprise/employee/employee.entity"),
        ["./university/student/student.entity"]: await import("./university/student/student.entity")
    };
    return { "@nestjs/swagger": { "models": [[import("./app/hook/hook.entity"), { "Hook": { fromBaseUser: { required: true, type: () => t["./app/app.entity"].BaseUser }, signature: { required: true, type: () => String }, mtdt: { required: true, type: () => String, description: "Client's metadata" }, note: { required: true, type: () => String, description: "Addition infomations" }, blackBox: { required: true, type: () => t["./app/utils/model.utils"].BlackBox } } }], [import("./app/app.entity"), { "BaseUser": { hooks: { required: true, type: () => [t["./app/hook/hook.entity"].Hook] }, email: { required: true, type: () => String }, name: { required: true, type: () => String, description: "Base user name" }, avatarPath: { required: false, type: () => String, description: "Base user's avatar path" } } }], [import("./auth/session/session.entity"), { "Session": { device: { required: true, type: () => t["./auth/device/device.entity"].Device }, parrent: { required: true, type: () => String }, child: { required: true, type: () => String, description: "Session's child" }, useTimeLeft: { required: true, type: () => Number, description: "Session's use time left" } } }], [import("./auth/device/device.entity"), { "Device": { owner: { required: true, type: () => t["./user/user.entity"].User }, sessions: { required: true, type: () => [t["./auth/session/session.entity"].Session], description: "Device's sessions" }, child: { required: true, type: () => String }, hashedUserAgent: { required: true, type: () => String, description: "Device's hashed useragent from client" } } }], [import("./notification/notification.entity"), { "Notification": { sent: { required: true, type: () => [t["./notification/reciever/reciever.entity"].Reciever] }, title: { required: true, type: () => String }, content: { required: true, type: () => String, description: "Notification content" }, type: { required: true, description: "Notification type", enum: t["./notification/notification.model"].NotificationType }, blackBox: { required: true, type: () => t["./app/utils/model.utils"].BlackBox } } }], [import("./notification/reciever/reciever.entity"), { "Reciever": { toUser: { required: true, type: () => t["./user/user.entity"].User }, fromNotification: { required: true, type: () => t["./notification/notification.entity"].Notification, description: "Notification origin" }, isRead: { required: true, type: () => Boolean }, readAt: { required: true, type: () => Date, description: "Notification time record" } } }], [import("./file/file.entity"), { "File": { fileCreatedBy: { required: true, type: () => t["./user/user.entity"].User }, atEvent: { required: true, type: () => t["./event/event.entity"].Event, description: "File create for event" }, path: { required: true, type: () => String }, title: { required: true, type: () => String, description: "File's title" }, type: { required: true, description: "File's type", enum: t["./file/file.model"].FileType }, uploadedAt: { required: true, type: () => Date, description: "File's upload time" } } }], [import("./event/tag/tag.entity"), { "EventTag": { toEvents: { required: true, type: () => [t["./event/event.entity"].Event] }, name: { required: true, type: () => String }, blackBox: { required: true, type: () => t["./app/utils/model.utils"].BlackBox } } }], [import("./event/creator/creator.entity"), { "EventCreator": { user: { required: true, type: () => t["./user/user.entity"].User }, createdEvents: { required: true, type: () => [t["./event/event.entity"].Event] } } }], [import("./event/event.entity"), { "Event": { eventCreatedBy: { required: true, type: () => t["./event/creator/creator.entity"].EventCreator }, participators: { required: true, type: () => [t["./event/participator/participator.entity"].EventParticipator], description: "Event's participators" }, documents: { required: true, type: () => [t["./file/file.entity"].File], description: "Event's attached files" }, tags: { required: true, type: () => [t["./event/tag/tag.entity"].EventTag], description: "Event's tags" }, description: { required: true, type: () => String }, title: { required: true, type: () => String, description: "Event's title" }, maxParticipants: { required: true, type: () => Number, description: "Event's maximum participator" }, positionsAvailable: { required: true, type: () => Number, description: "Event's available position" }, status: { required: true, description: "Event's status", enum: t["./event/event.model"].EventStatus }, type: { required: true, description: "Event's type", enum: t["./event/event.model"].EventType }, location: { required: true, type: () => String, description: "Event's location" }, startDate: { required: true, type: () => Date, description: "Event's start date" }, endDate: { required: true, type: () => Date, description: "Event's end date" }, applicationDeadline: { required: true, type: () => Date, description: "Application deadline" }, requiredSkills: { required: true, type: () => String, description: "Event's required skills" }, additionalFields: { required: false, type: () => Object, description: "Addition fields" }, blackBox: { required: true, type: () => t["./app/utils/model.utils"].BlackBox } }, "EventAssign": { title: { required: true, type: () => String }, startDate: { required: true, type: () => Date }, endDate: { required: true, type: () => Date }, applicationDeadline: { required: true, type: () => Date }, positionsAvailable: { required: true, type: () => Number }, maxParticipants: { required: true, type: () => Number }, location: { required: true, type: () => String }, description: { required: true, type: () => String }, type: { required: true, enum: t["./event/event.model"].EventType }, status: { required: true, enum: t["./event/event.model"].EventStatus }, additionalFields: { required: true, type: () => Object }, requiredSkills: { required: true, type: () => String } }, "EventUpdate": { title: { required: true, type: () => String }, startDate: { required: true, type: () => Date }, endDate: { required: true, type: () => Date }, applicationDeadline: { required: true, type: () => Date }, positionsAvailable: { required: true, type: () => Number }, maxParticipants: { required: true, type: () => Number }, location: { required: true, type: () => String }, description: { required: true, type: () => String }, type: { required: true, enum: t["./event/event.model"].EventType }, status: { required: true, enum: t["./event/event.model"].EventStatus }, additionalFields: { required: true, type: () => Object }, requiredSkills: { required: true, type: () => String }, id: { required: true, type: () => String } } }], [import("./event/participator/participator.entity"), { "EventParticipator": { fromEvent: { required: true, type: () => t["./event/event.entity"].Event }, participatedBy: { required: true, type: () => t["./user/user.entity"].User, description: "The user participate event" }, isAttended: { required: true, type: () => Boolean }, registeredAt: { required: true, type: () => Date, description: "Participator register time record" }, interviewAt: { required: true, type: () => Date, description: "Participator interview time record" }, interviewNote: { required: true, type: () => String, description: "Participator interview note" }, additionalData: { required: true, type: () => Object, description: "Addition data" }, status: { required: true, description: "The status in event", enum: t["./event/participator/participator.model"].EventParticipatorStatus }, role: { required: true, description: "The role in event", enum: t["./event/participator/participator.model"].EventParticipatorRole } } }], [import("./user/user.entity"), { "User": { hashedPassword: { required: true, type: () => String, description: "The hashed password" }, baseUser: { required: true, type: () => t["./app/app.entity"].BaseUser }, devices: { required: true, type: () => [t["./auth/device/device.entity"].Device] }, uploadFiles: { required: true, type: () => [t["./file/file.entity"].File], description: "User uploaded files" }, participatedEvents: { required: true, type: () => [t["./event/participator/participator.entity"].EventParticipator], description: "User participated events" }, recievedNotifications: { required: true, type: () => [t["./notification/reciever/reciever.entity"].Reciever], description: "User notifications" }, role: { required: true, enum: t["./user/user.model"].UserRole }, password: { required: true, type: () => String, description: "User's password" }, lastLogin: { required: true, type: () => Date, description: "User last login" }, isActive: { required: true, type: () => Boolean, description: "User active status" }, blackBox: { required: true, type: () => t["./app/utils/model.utils"].BlackBox } }, "UserRecieve": { accessToken: { required: true, type: () => String, description: "User access token", default: "" }, refreshToken: { required: true, type: () => String, description: "User refresh token", default: "" }, response: { required: true, type: () => Object, description: "Server's response", default: "" } } }], [import("./enterprise/employee/employee.entity"), { "Employee": { eventCreator: { required: true, type: () => t["./event/creator/creator.entity"].EventCreator }, enterprise: { required: true, type: () => t["./enterprise/enterprise.entity"].Enterprise }, position: { required: true, enum: t["./enterprise/employee/employee.model"].EmployeePosition } } }], [import("./enterprise/enterprise.entity"), { "Enterprise": { baseUser: { required: true, type: () => t["./app/app.entity"].BaseUser }, employees: { required: true, type: () => [t["./enterprise/employee/employee.entity"].Employee] }, students: { required: true, type: () => [t["./university/student/student.entity"].Student], description: "Enterprise's students" }, description: { required: true, type: () => String }, industry: { required: true, type: () => String, description: "Enterprise's industry" }, blackBox: { required: true, type: () => t["./app/utils/model.utils"].BlackBox } } }], [import("./university/student/student.entity"), { "Student": { user: { required: true, type: () => t["./user/user.entity"].User }, currentEnterprise: { required: true, type: () => t["./enterprise/enterprise.entity"].Enterprise }, major: { required: true, type: () => String }, skills: { required: true, type: () => String, description: "Student's skills" }, graduationYear: { required: true, type: () => Number, description: "Student graduation year" }, enrollmentYear: { required: true, type: () => Number, description: "Student enrollment year" } } }], [import("./university/faculty/faculty.entity"), { "Faculty": { eventCreator: { required: true, type: () => t["./event/creator/creator.entity"].EventCreator }, department: { required: true, type: () => String } } }], [import("./app/app.dto"), { "BaseUserEmail": { email: { required: true, type: () => String } } }], [import("./user/user.dto"), { "UserSignUp": { password: { required: true, type: () => String }, name: { required: true, type: () => String }, email: { required: true, type: () => String } }, "UserLogIn": { password: { required: true, type: () => String }, email: { required: true, type: () => String } }, "UserAuthencation": { password: { required: true, type: () => String } } }], [import("./enterprise/employee/employee.dto"), { "EmployeeHook": { enterpriseName: { required: true, type: () => String }, name: { required: true, type: () => String }, email: { required: true, type: () => String }, position: { required: true, enum: t["./enterprise/employee/employee.model"].EmployeePosition } }, "EmployeeSignUp": { signature: { required: true, type: () => String }, position: { required: true, enum: t["./enterprise/employee/employee.model"].EmployeePosition }, password: { required: true, type: () => String }, name: { required: true, type: () => String }, email: { required: true, type: () => String } } }], [import("./enterprise/enterprise.dto"), { "EnterpriseAssign": { signature: { required: true, type: () => String }, description: { required: true, type: () => String }, industry: { required: true, type: () => String }, name: { required: true, type: () => String }, email: { required: true, type: () => String } } }], [import("./university/student/student.dto"), { "StudentSignUp": { major: { required: true, type: () => String }, graduationYear: { required: true, type: () => Number }, enrollmentYear: { required: true, type: () => Number }, skills: { required: true, type: () => String }, password: { required: true, type: () => String }, name: { required: true, type: () => String }, email: { required: true, type: () => String } } }], [import("./university/faculty/faculty.dto"), { "FacultyAssign": { department: { required: true, type: () => String }, password: { required: true, type: () => String }, name: { required: true, type: () => String }, email: { required: true, type: () => String }, signature: { required: true, type: () => String } } }]], "controllers": [[import("./app/app.controller"), { "AppController": { "login": { summary: "Login request" }, "signUp": { summary: "Sign up request" }, "logout": { summary: "Logout request" }, "refresh": { summary: "Refreshing tokens request" }, "requestSignatureViaConsole": { summary: "Change password via console" }, "serverStatus": { summary: "Check server status" } } }], [import("./enterprise/employee/employee.controller"), { "EmployeeController": { "employeeHook": { summary: "Employee request hook" }, "signUp": { summary: "Employee sign up request" } } }], [import("./enterprise/enterprise.controller"), { "EnterpriseController": { "assign": { summary: "Assign enterprise request" } } }], [import("./file/file.controller"), { "FileController": { "seeUploadedFile": { summary: "Get uploaded file" } } }], [import("./university/student/student.controller"), { "StudentController": { "signUp": { summary: "Student login request" } } }], [import("./university/faculty/faculty.controller"), { "FacultyController": { "assign": { summary: "Assign faculty" } } }]] } };
};